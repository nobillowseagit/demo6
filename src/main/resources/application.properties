#生产者
#kafka服务器地址
spring.kafka.producer.bootstrap-servers=172.18.0.3:9092
#重发次数
spring.kafka.producer.retries=1
#批量提交大小
spring.kafka.producer.batch-size=16384
#缓存大小
spring.kafka.producer.buffer-memory=33554432
#最大请求消息体大小
spring.kafka.producer.properties.max.requst.size=2097152
#key序列化类
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#value序列化类
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
#acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
spring.kafka.producer.acks=1
#消费者
#kafka服务器地址
spring.kafka.consumer.bootstrap-servers=172.18.0.3:9092
#消费组id
#spring.kafka.consumer.group-id=DrewGroup
spring.kafka.consumer.group-id=test-consumer-group
# earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
# latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
# none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
spring.kafka.consumer.auto-offset-reset=earliest
#是否自动提交偏移量
spring.kafka.consumer.enable-auto-commit=true
#自动提交偏移量的频率
spring.kafka.consumer.auto-commit-interval=100
#消费线程数，即启动的客户端数
spring.kafka.listener.concurrency=2


spring.kafka.consumer.client-id=DrewGroup



#management.endpoint.metrics.enabled=true
#management.endpoints.web.exposure.include=*
#management.endpoint.prometheus.enabled=true
#management.metrics.export.prometheus.enabled=true



